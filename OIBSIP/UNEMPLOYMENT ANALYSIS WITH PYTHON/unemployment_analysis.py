# -*- coding: utf-8 -*-
"""UNEMPLOYMENT ANALYSIS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yjwjqWBbrJgCWnjBnwX5OwFZBs4XnT_t

***Note:*** *Connect your Google Drive when running the snippets*

*Download dataset here [UNEMPLOYMENT ANALYSIS](https://drive.google.com/file/d/1ckk-2t9J-Z3N70SnClT5EahTOLo8wRIw/view?usp=share_link)*

### Knowing about the Dataset

**Importing the Required Libraries**
"""

# Numpy Library for Numerical Calculations
import numpy as np

# Pandas Library for Dataframe
import pandas as pd

# Matplotlib, Seaborn and plotly for Plottings
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.io as pio
import plotly.express as px
import plotly.graph_objects as go
import plotly.figure_factory as ff

# Calendar Library for knowing about the Year-Month-Day
import calendar

# Datetime library for handling date and time in the Dataset
import datetime as dt

"""**Reading informations in the Dataset**"""

unemployed = pd.read_csv("/content/drive/MyDrive/Unemployment_Rate_upto_11_2020.csv")

"""**Getting the Infromations of the Dataset**"""

unemployed.info()

"""**Checking for null values in Data**"""

unemployed.isnull().sum()

"""**Checking the First Five Values in the Data**"""

unemployed.head()

"""**Checking the Last Five Values in the Data**"""

unemployed.tail()

"""**Dimensions of the Dataset**"""

unemployed.shape

"""**Describing the Dataset**"""

unemployed.describe()

"""**Changing the Headers of the Dataset**"""

unemployed.columns = ['States', 'Date', 'Frequency', 'Estimated Unemployment Rate', 'Estimated Employed', 'Estimated Labour Participation Rate', 'Region', 'longitude', 'latitude']

"""**Changing the Date Format**"""

unemployed['Date'] = pd.to_datetime(unemployed['Date'], dayfirst=True)

unemployed['Frequency']= unemployed['Frequency'].astype('category')

unemployed['Month'] =  unemployed['Date'].dt.month

unemployed['Month_Num'] = unemployed['Month'].apply(lambda x : int(x))

unemployed['Month_Name'] =  unemployed['Month_Num'].apply(lambda x: calendar.month_abbr[x])

unemployed['Region'] = unemployed['Region'].astype('category')

"""**Dropping the Month Column**"""

unemployed.drop(columns='Month',inplace=True)
unemployed.head()

"""**Describing about EUR, EE and ELPR**"""

unemployed_stats = unemployed[['Estimated Unemployment Rate', 'Estimated Employed', 'Estimated Labour Participation Rate']]
round(unemployed_stats.describe().T,2)

"""**Checking the Mean accoring to the Regions**"""

region_stats = unemployed.groupby(['Region'])[['Estimated Unemployment Rate','Estimated Employed','Estimated Labour Participation Rate']].mean().reset_index()
region_stats = round(region_stats,2)

region_stats

"""**Plotting the Heatmap**"""

heat_maps = unemployed[['Estimated Unemployment Rate', 'Estimated Employed', 'Estimated Labour Participation Rate', 'longitude', 'latitude', 'Month_Num']]
heat_maps = heat_maps.corr()

# Plotting the Figure
plt.figure(figsize=(10,6))
sns.set_context('notebook',font_scale=1)
sns.heatmap(heat_maps, annot=True,cmap='summer');

"""### Exploratory Data Analysis

**Plotting the Unemployment Rate according to States**
"""

fig = px.box(unemployed, x = 'States', y = 'Estimated Unemployment Rate', color = 'States', title='Unemployment Rate', template='plotly')
fig.update_layout(xaxis = {'categoryorder':'total descending'})
fig.show()

"""**Plotting the Unemployment Rate according to Regions**"""

fig = px.scatter_matrix(unemployed, template = 'plotly', dimensions = ['Estimated Unemployment Rate', 'Estimated Employed', 'Estimated Labour Participation Rate'], color = 'Region')
fig.show()

"""**Average Unemployment Rate in each State**"""

plot_ump = unemployed[['Estimated Unemployment Rate','States']]
df_unemp = plot_ump.groupby('States').mean().reset_index()
df_unemp = df_unemp.sort_values('Estimated Unemployment Rate')
fig = px.bar(df_unemp, x = 'States', y = 'Estimated Unemployment Rate', color = 'States', title = 'Average Unemployment Rate in each State', template = 'plotly')
fig.show()

"""**Unemployment Rate for 10 Months in 2020**"""

fig = px.bar(unemployed, x = 'Region', y = 'Estimated Unemployment Rate', animation_frame = 'Month_Name', color = 'States', title='Unemployment Rate across region from Jan 2020 to Oct 2020', height = 700, template = 'plotly')
fig.update_layout(xaxis = {'categoryorder':'total descending'})
fig.layout.updatemenus[0].buttons[0].args[1]["frame"]["duration"] = 2000
fig.show()

"""**Unemployment Rate in each Region and State**"""

unemplo_df = unemployed[['States','Region','Estimated Unemployment Rate','Estimated Employed','Estimated Labour Participation Rate']]
unemplo = unemplo_df.groupby(['Region','States'])['Estimated Unemployment Rate'].mean().reset_index()
fig = px.sunburst(unemplo, path = ['Region','States'], values = 'Estimated Unemployment Rate', color_continuous_scale = 'Plasma', title = 'Unemployment Rate in each Region and State', height = 650, template = 'ggplot2')
fig.show()

"""**Impact of Lockdown in Unemployment across Regions**"""

fig = px.scatter_geo(unemployed,'longitude', 'latitude', color = "Region", hover_name = "States", size = "Estimated Unemployment Rate", animation_frame = "Month_Name",scope = 'asia', template = 'plotly', title = 'Impact of Lockdown on Employement across Regions')
fig.layout.updatemenus[0].buttons[0].args[1]["frame"]["duration"] = 2000
fig.update_geos(lataxis_range = [5, 35], lonaxis_range = [65, 100], oceancolor = "#6dd5ed", showocean = True)
fig.show()

"""**Percentage change in Unemployment**"""

lock = unemployed[(unemployed['Month_Num'] >= 4) & (unemployed['Month_Num'] <=7)]
bf_lock = unemployed[(unemployed['Month_Num'] >= 1) & (unemployed['Month_Num'] <=4)]
g_lock = lock.groupby('States')['Estimated Unemployment Rate'].mean().reset_index()
g_bf_lock = bf_lock.groupby('States')['Estimated Unemployment Rate'].mean().reset_index()
g_lock['Unemployment Rate before Lockdown'] = g_bf_lock['Estimated Unemployment Rate']
g_lock.columns = ['States',  'Unemployment Rate after Lockdown', 'Unemployment Rate before Lockdown']
g_lock.head()

"""**Plotting the Percentate change after Lockdown**"""

g_lock['Percentage change in Unemployment'] = round(g_lock['Unemployment Rate after Lockdown'] - g_lock['Unemployment Rate before Lockdown'] / g_lock['Unemployment Rate before Lockdown'], 2)
plot_per = g_lock.sort_values('Percentage change in Unemployment')
fig = px.bar(plot_per, x = 'States', y = 'Percentage change in Unemployment', color = 'Percentage change in Unemployment', title = 'Percentage change in Unemployment in each State after Lockdown', template = 'ggplot2')
fig.show()

"""**Function for segmenting the States according to the Impact level**"""

def sort_impact(x):
    if x <= 10:
        return 'Least Impacted States'
    elif x <= 20:
        return 'Large Impacted States'
    elif x <= 30:
        return 'Larger Impacted States'
    elif x <= 40:
        return 'Most impacted States'
    return x

plot_per['Impact Status'] = plot_per['Percentage change in Unemployment'].apply(lambda x:sort_impact(x))
fig = px.bar(plot_per, y = 'States',x = 'Percentage change in Unemployment', color = 'Impact Status', title = 'Impact of Lockdown on Employment across States', template = 'ggplot2', height = 650)
fig.show()

"""Most and Larger Impacted States/UT

1.   Puducherry
2.   Jharkhand
3.   Bihar
4.   Haryana
5.   Tripura
6.   Tamil Nadu
7.   Delhi

Least Impacted States/UT

1.   Meghalaya
2.   Assam
3.   Uttarakhand
4.   Sikkim
5.   Gujarat
6.   Telangana
7.   Chhattisgarh
"""