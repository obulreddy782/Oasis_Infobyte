# -*- coding: utf-8 -*-
"""CAR PRICE PREDICTION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tTECIUqULh-lbsChww2QxlOPWFz76x5r

***Note:*** *Connect your Google Drive when running the snippets*

*Download dataset here [CAR PRICE PREDICTION](https://drive.google.com/file/d/1EUfj25s3IVVe4Kxrz1hmf9QCSzy_G6Dh/view?usp=share_link)*

### Knowing about the Dataset

**Importing the Required Libraries**
"""

# Numpy Library for Numerical Calculations
import numpy as np

# Pandas Library for Dataframe
import pandas as pd

# Math Library for Mathematical Calulations
import math

# Pickle Library for Saving the Model
import pickle

# Matplotlib and Seaborn for Plottings
import matplotlib.pyplot as plt
import seaborn as sns

# Train_Test_Split for splitting the Dataset
from sklearn.model_selection import train_test_split

# Linear Regression, Decision Tree are Models
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor

# Mean Absolute Error, R2 Score and Mean Squared Error is for Analysis of Models
from sklearn.metrics import mean_absolute_error, r2_score, mean_squared_error

"""**Reading informations in the Dataset**"""

car_price = pd.read_csv("/content/drive/MyDrive/CarPrice.csv")

"""**Checking for null values in Data**"""

car_price.isnull().sum()

"""**Checking the First Five Values in the Data**"""

car_price.head()

"""**Checking the Last Five Values in the Data**"""

car_price.tail()

"""**Dimensions of the Dataset**"""

car_price.shape

"""**Describing the Dataset**"""

car_price.describe()

"""**Checking for the classes in the Data**"""

car_price.groupby('carbody').size()

"""**Taking the required Informations**"""

car = car_price[["symboling", "wheelbase", "carlength", "carwidth", "carheight", "curbweight", "enginesize", "boreratio", "stroke", "compressionratio", "horsepower", "peakrpm", "citympg", "highwaympg", "price"]]
car

"""**Plotting the Bivariate Bar for the Dataset**"""

def plot_bivariate_bar(dataset, cols, width, height, hspace, wspace):
    dataset = dataset.select_dtypes(include = [np.int64])
    plt.style.use('seaborn-whitegrid')
    fig = plt.figure(figsize=(width, height))
    fig.subplots_adjust(left = None, bottom = None, right = None, top = None, wspace = wspace, hspace = hspace)
    rows = math.ceil(float(dataset.shape[1]) / cols)
    for i, column in enumerate(dataset.columns):
        ax = fig.add_subplot(rows, cols, i + 1)
        ax.set_title(column)
        if dataset.dtypes[column] == np.int64:
            g = sns.countplot(y = column, data = dataset)
            substrings = [s.get_text()[:15] for s in g.get_yticklabels()]
            g.set(yticklabels = substrings)

plot_bivariate_bar(car, cols = 5, width = 20, height = 15, hspace = 0.2, wspace = 0.5)

"""**Plotting the Joint Plot for the Dataset**"""

plt.figure(figsize = (10, 10))
sns.jointplot(data = car)
plt.show()

"""**Plotting the Correlation Matrix of the Dataset**"""

plt.figure(figsize = (20, 10))
sns.set_style('darkgrid')
sns.heatmap(car.corr(), annot = True, cmap = 'viridis')
plt.show()

x = car.drop(["price"], 1)
y = car["price"]
xtrain, xtest, ytrain, ytest = train_test_split(x, y, random_state = 16, test_size = 0.25, shuffle=True)

"""### Model Building

**Creating the Model**
"""

model1 = LinearRegression()
model2 = DecisionTreeRegressor()

"""**Fitting the Model**"""

model1.fit(xtrain, ytrain)
model1.score(xtrain, ytrain)

model2.fit(xtrain, ytrain)
model2.score(xtrain, ytrain)

"""### Testing Model

**Testing the Model**
"""

Linear_predictions = model1.predict(xtest)
Decision_predictions = model2.predict(xtest)

"""**Metrics**"""

print("Linear Regression Model:")
print("************************")
print('R2_score:', r2_score(ytest, Linear_predictions))
print('Mean Absolute Error:', mean_absolute_error(ytest, Linear_predictions))
print('Mean Squared Error:', mean_squared_error(ytest, Linear_predictions))
print('Root Mean Squared Error:', np.sqrt(mean_squared_error(ytest, Linear_predictions)))
print("---------------------------------------------")
print("Decision Tree Regressor Model:")
print("******************************")
print('R2_score:', r2_score(ytest, Decision_predictions))
print('Mean Absolute Error:', mean_absolute_error(ytest, Decision_predictions))
print('Mean Squared Error:', mean_squared_error(ytest, Decision_predictions))
print('Root Mean Squared Error:', np.sqrt(mean_squared_error(ytest, Decision_predictions)))

"""### Saving Models

**Saving the Models**
"""

filename = "Linear_Regression.pkl"
pickle.dump(model1, open(filename, 'wb'))
filename = "Decision_Tree_Regressor.pkl"
pickle.dump(model2, open(filename, 'wb'))
print("Saved all Models")